package sudoku;
import IteradorArreglo.ConjuntoArreglo;

public class Sudoku {
    public static String imprime(int[][] sudoku, int ren, int col){
        StringBuilder res = new StringBuilder();
        if(sudoku != null)
            for(int i = 0; i < ren; i++) {
                for(int j = 0; j < col; j++)
                    res.append(sudoku[i][j] + " ");
                res.append("\n");
            }
        if (res == null)
            res.append("Vacía");
        
        return res.toString();
    }
    
    public static boolean posible(int[][] sudoku, int iBase,
        int jBase, int posNum){
        boolean res = false;
        int i = (iBase + 1) % 9;
        int j = (jBase + 1) % 9;
        int m1 = iBase / 3;
        int m2 = jBase / 3;
        int r1 = iBase % 3;
        int r2 = iBase % 3;
        int a = 3 * m1 + ((r1 + 1) % 3);
        int b = 3 * m2 + ((r2 + 1) % 3);
        int c = 3 * m1 + ((r1 + 2) % 3);
        int d = 3 * m2 + ((r2 + 2) % 3);
        
        if(sudoku != null && sudoku[iBase][jBase] == 0){
            res = true;//porque no else?
            
            if(sudoku[a][b] == posNum || sudoku[a][d] == posNum ||
                    sudoku[c][b] == posNum || sudoku[c][d] == posNum )
                res = false;
            
            while(res && i != iBase ){
                if(sudoku[i][jBase] == posNum)
                    res = false;
                
                i = (i + 1) % 9;
            }

            while(res && j != jBase ){
                if(sudoku[iBase][j] == posNum)
                    res = false;
                
                j = (j + 1) % 9;
            }
                
        }
        
        return res;
    }
    
    
    public static boolean pasaMatriz(int[][] sudoku){
        if(sudoku != null)
            return pasaMatriz(sudoku, 0, 0, 1);
        else
            return false;
    }
    
    private static boolean pasaMatriz(int[][]sudoku, int i, int j, int posNum){
        //System.out.println("i = " + i + "\n");
        if(i <9){
            //System.out.println("j = " + j + "\n");
            if(j < 9){
                //System.out.println(" sudoku[i][j] = " + sudoku[i][j] + "\n");
                if(sudoku[i][j] == 0){
                    
                    if(posNum < 10){
                        //System.out.println( posNum + " < 10\n");
                        if(posible(sudoku, i, j, posNum)){
                            //System.out.println(posNum + " es posible\n");
                            sudoku[i][j] = posNum;
                            if(!pasaMatriz(sudoku, i, j + 1, 1)){
                                sudoku[i][j] = 0;
                                return pasaMatriz(sudoku, i, j, posNum + 1);
                            }

                        }
                        else
                            return pasaMatriz(sudoku, i, j, posNum + 1);
                    }
                    else
                        return false;
                }
                else
                    return pasaMatriz(sudoku, i, j + 1, 1);
                
                
            }
            
            else{
                
                return pasaMatriz(sudoku, i + 1, 0, 1);
            }
                
        }
        return true;
        
    }
    
    
    
    
    public static void main(String[] args) {
        int[][] sudoku = new int[9][9];
        sudoku[0][0] = 1;
        sudoku[0][1] = 5;
        sudoku[0][3] = 6;
        sudoku[0][5] = 3;
        sudoku[0][7] = 2;
        sudoku[1][4] = 4;
        sudoku[1][6] = 3;
        sudoku[1][7] = 7;
        sudoku[1][8] = 8;
        sudoku[2][0] = 3;
        sudoku[2][5] = 8;
        sudoku[3][0] = 5;
        sudoku[3][1] = 1;
        sudoku[3][6] = 9;
        sudoku[4][7] = 1;
        sudoku[4][2] = 2;
        sudoku[4][6] = 6;
        sudoku[5][3] = 3;
        sudoku[5][6] = 2;
        sudoku[6][0] = 7;
        sudoku[6][1] = 3;
        sudoku[6][2] = 5;
        sudoku[6][3] = 8;
        sudoku[6][8] = 6;;
        sudoku[7][1] = 8;
        sudoku[7][7] = 4;
        sudoku[8][1] = 6;
        sudoku[8][2] = 9;
        sudoku[8][6] = 8;
        System.out.println(imprime(sudoku, 9, 9));
        System.out.println(posible(sudoku, 0,6,1)); //false
        System.out.println(posible(sudoku, 0,2,3)); //false
        System.out.println(posible(sudoku, 0,2,2)); //false
        System.out.println(posible(sudoku, 0,1,3)); 
        contestar(sudoku);
        System.out.println(imprime(sudoku, 9, 9));
    }
    
}





Código encontrado en internet para verificar la matriz


    
    public static boolean contestar(int[][] sudoku){
        
            return contestar(sudoku, 0, 0);
    }
    
    private static boolean contestar(int[][] sudoku, int iBase,
        int jBase){
        int numPos = 1;
        
        for(int i = iBase; i < 9; i++){
            for(int j = jBase; j < 9; j++){
                if(sudoku[i][j] == 0){
                    
                    for(int num = 1; num <= 9; num++){
                        if(posible(sudoku, i, j, num)){
                            sudoku[i][j] = num;
                           
                            if(contestar(sudoku, 0, 0))
                                return true;
                            else
                                sudoku[i][j] = 0;
                        }
                    }
                    return false;
                }
                             
            }
        }
        return true;        
    }




Código intento con conjuntos


public static ConjuntoArreglo posiblesNumeros(int[][] sudoku, int iBase, int jBase){
        
        ConjuntoArreglo res = new ConjuntoArreglo(9);
        
        if(sudoku[iBase][jBase] == 0){
            for(int k = 1; k < 10; k++){
            res.agrega(k);
            }

            int i = (iBase + 1) % 9;
            int j = (jBase + 1) % 9;
            int m1 = iBase / 3;
            int m2 = jBase / 3;
            int r1 = iBase % 3;
            int r2 = iBase % 3;
            int a = 3 * m1 + ((r1 + 1) % 3);
            int b = 3 * m2 + ((r2 + 1) % 3);
            int c = 3 * m1 + ((r1 + 2) % 3);
            int d = 3 * m2 + ((r2 + 2) % 3);

            while (i != iBase){
                res.quita(sudoku[i][jBase]);
                i = (i + 1) % 9;
            }

            while(j != jBase ){
                res.quita(sudoku[iBase][j] );
                j = (j + 1) % 9;
            }
        
            res.quita(sudoku[a][b]);
            res.quita(sudoku[a][d]);
            res.quita(sudoku[c][b]);
            res.quita(sudoku[c][d]);
       
        }
        else
            res.agrega(sudoku[iBase][jBase]);
        return res;
    }


public static boolean pasaMatriz(int[][] sudoku){
        Iterator it = null;
        if(sudoku != null)
            return pasaMatriz(sudoku, 0, 0, it);
        else
            return false;
    }
    
    
    private static boolean pasaMatriz(int[][]sudoku, int i, int j, Iterator it){
        //System.out.println("i = " + i + "\n");
        ConjuntoArreglo res = new ConjuntoArreglo();
        if(i <9){
            //System.out.println("j = " + j + "\n");
            if(j < 9){
                //System.out.println(" sudoku[i][j] = " + sudoku[i][j] + "\n");
                if(sudoku[i][j] == 0){
                    res = posiblesNumeros(sudoku, i, j);
                    it = res.iterator();
                    if(it.hasNext()){
                        sudoku[i][j] = (int) it.next();
                        if(!pasaMatriz(sudoku, i, j + 1, it)){
                            sudoku[i][j] = 0;
                            return pasaMatriz(sudoku, i, j,it);
                        }
                    }
                    else
                        return false;
                }
                else
                    return pasaMatriz(sudoku, i, j + 1, it);
                
                
            }
            
            else{
                
                return pasaMatriz(sudoku, i + 1, 0, it);
            }
                
        }
        return true;
        
    }
