package sudoku;

import IteradorArreglo.ConjuntoArreglo;
import java.util.Iterator;

public class Sudoku {
 //Código intento con conjuntos
   public static ConjuntoArreglo posiblesNumeros(int[][] sudoku, int iBase, int jBase){
        
        ConjuntoArreglo res = new ConjuntoArreglo(9);
        
        if(sudoku[iBase][jBase] == 0){
            for(int k = 1; k < 10; k++){
            res.agrega(k);
            }

            int i = (iBase + 1) % 9;
            int j = (jBase + 1) % 9;
            int m1 = iBase / 3;
            int m2 = jBase / 3;
            int r1 = iBase % 3;
            int r2 = jBase % 3;
            int a = 3 * m1 + ((r1 + 1) % 3);
            int b = 3 * m2 + ((r2 + 1) % 3);
            int c = 3 * m1 + ((r1 + 2) % 3);
            int d = 3 * m2 + ((r2 + 2) % 3);
            
            while (i != iBase){
                res.quita(sudoku[i][jBase]);
                i = (i + 1) % 9;
            }

            while(j != jBase ){
                res.quita(sudoku[iBase][j] );
                j = (j + 1) % 9;
            }
            
            
            res.quita(sudoku[a][b] );
            
            res.quita(sudoku[a][d] );
            
            res.quita(sudoku[c][b]);
            
            res.quita(sudoku[c][d]);
       
        }
        else
            res.agrega(sudoku[iBase][jBase]);
        return res;
    }


    public static boolean pasaMatriz(int[][] sudoku){
        Iterator it = null;
        if(sudoku != null){
            it = posiblesNumeros(sudoku, 0, 0).iterator();
            return pasaMatriz(sudoku, 0, 0, it);
        }
        else
            return false;
    }
    
    
    private static boolean pasaMatriz(int[][]sudoku, int i, int j, Iterator it){
        ConjuntoArreglo res = new ConjuntoArreglo();
        int posNum;
        Iterator aux;
        System.out.println(imprime(sudoku, 9, 9));
        System.out.println("i = " + i + "\n");
        if(i <9){
            System.out.println("j = " + j + "\n");
            if(j < 9){
                System.out.println("sudoku[" + i + "][" + j + "] = " + sudoku[i][j] + "\n");
                if(sudoku[i][j] == 0){
                   
                    if(it.hasNext()){
                        
                        System.out.println("it has next line");
                        posNum = (int) it.next();
                        System.out.println("posNum = " + posNum);
                        sudoku[i][j] = posNum;
                        System.out.println("si");
                        if(j < 8){
                            res =  posiblesNumeros(sudoku, i, j + 1);
                        }
                        else if(i < 8){
                            res = posiblesNumeros(sudoku, i + 1, 0);
                        }
                        else
                            return true;
                        
                        
                        if(res.getCardinalidad() == 0){
                            sudoku[i][j] = 0;
                            System.out.println("No tiene opciones de número el siguiente número.");
                        }
                        System.out.println("Cardinalidad de res es " + res.getCardinalidad());
                        aux = res.iterator();
                        
                        if(!pasaMatriz(sudoku, i, j + 1, aux)){
                            sudoku[i][j] = 0;
                            System.out.println("Falló");
                            return pasaMatriz(sudoku, i, j,it);
                        }
                    }
                    else{
                        System.out.println("it no tiene más elementos");
                        return false;
                    }
                }
                else{
                    if(j == 8){
                        if(i == 8)
                            return true;
                        else{
                            res = posiblesNumeros(sudoku, i + 1, 0);
                            if(res.getCardinalidad() == 0)
                                return false;
                            aux = res.iterator();
                            System.out.println("Cardinalidad de que sigue es " + res.getCardinalidad());
                            return pasaMatriz(sudoku, i + 1, 0, aux);
                        }
                    }
                    else{
                        
                        res = posiblesNumeros(sudoku, i, j + 1);
                        if(res.getCardinalidad() == 0)
                            return false;
                        aux = res.iterator();
                        System.out.println("Cardinalidad del que sigue es " + res.getCardinalidad());
                        return pasaMatriz(sudoku, i, j + 1, aux);
                    }
                }
                    
                
                
            }
            
            else{
                System.out.println("j es " + j + " , por lo que baja de renglón.");
                if(i < 8){
                    aux = posiblesNumeros(sudoku, i + 1, 0).iterator();
                    return pasaMatriz(sudoku, i + 1, 0, aux);
                }
                else
                    return true;
                
            }
                
        }
        return true;
        
    }






    public static String imprime(int[][] sudoku, int ren, int col){
        StringBuilder res = new StringBuilder();
        if(sudoku != null)
            for(int i = 0; i < ren; i++) {
                for(int j = 0; j < col; j++)
                    res.append(sudoku[i][j] + " ");
                res.append("\n");
            }
        if (res == null)
            res.append("Vacía");
        
        return res.toString();
    }
    
    public static void main(String[] args) {
        
        int [][] sudoku = {{1, 5, 0, 6, 0, 3, 0, 2, 9},
                          {0, 0, 0, 0, 4, 0, 3, 7, 8},
                          {3, 0, 0, 0, 0, 8, 0, 0, 0},
                          {5, 1, 0, 0, 0, 0, 9, 0, 0},
                          {0, 0, 2, 0, 0, 0, 6, 1, 0},
                          {0, 0, 0, 3, 0, 0, 2, 0, 0},
                          {7, 3, 5, 8, 0, 0, 0, 0, 6},
                          {0, 8, 0, 0, 0, 0, 0, 4, 0},
                          {0, 6, 9, 0, 0, 0, 8, 0, 0}};
       
        System.out.println(imprime(sudoku, 9, 9));
        /*System.out.println(posiblesNumeros(sudoku, 0, 2).toString());
        System.out.println(posiblesNumeros(sudoku, 1, 1).toString());
        System.out.println(posiblesNumeros(sudoku, 2, 6).toString());
        System.out.println(posiblesNumeros(sudoku, 2, 7).toString());         
        System.out.println(posiblesNumeros(sudoku, 5, 5).toString());
        System.out.println(posiblesNumeros(sudoku, 0, 2).toString() + "cardinalidad es " + posiblesNumeros(sudoku, 0, 2).getCardinalidad());
        System.out.println(posiblesNumeros(sudoku, 0, 4).toString());
        System.out.println(posiblesNumeros(sudoku, 1, 2).toString() + " de [1][2]");
        System.out.println(posible(sudoku, 0,6,1)); //false
        System.out.println(posible(sudoku, 0,2,3)); //false
        System.out.println(posible(sudoku, 0,2,2)); //false
        System.out.println(posible(sudoku, 0,1,3)); 
        */
        
        pasaMatriz(sudoku);
        System.out.println(imprime(sudoku, 9, 9));
    }
    
}
